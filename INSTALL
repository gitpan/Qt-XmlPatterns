################################################################

WARNING: YOU MUST INSTALL THE C++ QT PACKAGE FIRST IN ORDER TO USE THIS!

################################################################

Option 1. CPAN Package (Pre-made)

Please use CPAN shell or equivalent to install.
Or you download it manually and execute the following commands:
# inside the src dir
$ perl Makefile.PL
$ gmake
$ gmake test
$ gmake install # if you want

You may get compile errors, possibly due to the following reasons:
 - Qt library version mis-match
 - defined macro mis-match

Either case above you will have to try option 2 yourself, or mail me.

################################################################

Option 2. Custom Build

This way is more complicated, it may fail at any step.
Don't blame me :-P

1) preparation:
   download/clone code from my github repos (trunk):
   https://github.com/dxma/cpan.git
   2 packages are required: PerlQt and Parse-QTEDI.
   put them into the same directory.

2) build:
   come to PerlQt directory, there is only one makefile inside at the
   moment - GNUmakefile.
   link proper make config file and module config file:
     $ ln -s config_core.mk config.mk
     $ ln -s module_core.conf module.conf
     $ ln -s typemap_core.manual typemap.manual
     $ ln -s class_core.virtual class.virtual
     # link typemap and package map from other qt package(s)
     # you can figure out possible required package(s) from pkg-config
     # output. For instance, QtGui links with both itself and QtCore,
     # in order to compile QtGui it is very likely it will involve
     # both type and package information from QtCore, both files are
     # available during QtCore binding build.
     $ ln -s ../Qt-Core/05typemap/typemap_draft typemap.manual.core
     $ ln -s ../Qt-Core/05typemap/packagemap packagemap.manual.core
   now run 'gmake ' to start the build, be patient, it takes time.
   if everything goes fine, you would get the xs code under 99xscode
   and pm code under 99pmcode.
   there are many reasons it could fail, feel free to learn from the
   error message and check the (ugly) source code.

3) compile:
   the build has been abstracted into a single command:
     $ gmake build
   which does the normal step to compile an xs module:
     $ perl Makefile.PL
     $ gmake -f Makefile # beaware of the correct makefile
   once build passed, do a simple bootstrap test:
     $ gmake test
   which calls:
     $ gmake -f Makefile test
   finally, when you are happy:
     $ gmake -f Makefile install # if needed

Enjoy the pain :-P
